name: Server V2 Setup and Deployment
 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  workflow_call:
    secrets:
      DOCKERHUB_USER:
        description: "DOCKERHUB_USER"
        required: true
      DOCKERHUB_TOKEN:
        description: "DOCKERHUB_TOKEN"
        required: true
    inputs:
      image_tag_suffix:
        description: "Optional suffix to override tag name generation"
        type: string
        required: false
      action:
        type: string
        required: false
        default: "do nothing"

jobs:
  prepare-contracts:
    name: Prepare contracts
    runs-on: revolution-runner
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup Docker permissions
        shell: bash
        run: |
          sudo chmod 666 /var/run/docker.sock
          sudo chmod 777 /var/run/docker

      - name: Prepare ENV
        shell: bash
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo CI=1 >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo $HOME/.local/bin >> $GITHUB_PATH
          echo CI=1 >> .env
          echo IN_DOCKER=1 >> .env

      - name: Install Apt dependencies
        shell: bash
        run: |
          sudo mkdir -p /tmp
          sudo chmod 1777 /tmp
          sudo chown -R root:root /tmp
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Yarn
        run: npm install -g yarn

      - name: Setup rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly-2024-09-01

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contracts
          path: |
            ./contracts

  build-server-v2:
    name: Build and Push Server V2 Image
    needs: prepare-contracts
    runs-on: revolution-runner
    permissions:
      packages: write
      contents: read
    env:
      IMAGE_TAG_SUFFIX: ${{ inputs.image_tag_suffix }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Setup Docker permissions
        shell: bash
        run: |
          sudo chmod 666 /var/run/docker.sock
          sudo chmod 777 /var/run/docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup env
        shell: bash
        run: |
          echo ZKSYNC_HOME=$(pwd) >> $GITHUB_ENV
          echo CI=1 >> $GITHUB_ENV
          echo $(pwd)/bin >> $GITHUB_PATH
          echo CI=1 >> .env
          echo IN_DOCKER=1 >> .env

      - name: Set env vars
        shell: bash
        run: |
          echo PLATFORM=linux-amd64 >> $GITHUB_ENV
          if [ -n "${{ inputs.image_tag_suffix }}" ]; then
            echo IMAGE_TAG_SHA_TS="${{ env.IMAGE_TAG_SUFFIX }}" >> $GITHUB_ENV
          else
            echo IMAGE_TAG_SHA_TS=$(git rev-parse --short HEAD)-$(date +%s) >> $GITHUB_ENV
          fi

      - name: Download contracts
        uses: actions/download-artifact@v4
        with:
          name: contracts
          path: |
            ./contracts

      - name: Login to Docker Hub
        if: ${{ inputs.action == 'push' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: ${{ inputs.action == 'push' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          platforms: linux/amd64
          file: docker/server-v2/Dockerfile
          build-args: |
            RUSTC_WRAPPER=sccache
          tags: |            
            ghcr.io/${{ github.repository_owner }}/server-v2:${{ env.IMAGE_TAG_SHA_TS }}-${{ env.PLATFORM }}
            ${{ secrets.DOCKERHUB_USER }}/server-v2:${{ env.IMAGE_TAG_SHA_TS }}-${{ env.PLATFORM }}

      - name: Push docker image
        if: ${{ inputs.action == 'push' }}
        run: |
          docker push ${{ secrets.DOCKERHUB_USER }}/server-v2:${{ env.IMAGE_TAG_SHA_TS }}-${{ env.PLATFORM }}
          docker push ghcr.io/${{ github.repository_owner }}/server-v2:${{ env.IMAGE_TAG_SHA_TS }}-${{ env.PLATFORM }}

  create-manifest:
    name: Create release manifest
    runs-on: revolution-runner
    needs: build-server-v2
    if: ${{ inputs.action == 'push' }}
    env:
      IMAGE_TAG_SUFFIX: ${{ inputs.image_tag_suffix }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create Docker manifest
        run: |
          docker_repositories=("${{ secrets.DOCKERHUB_USER }}/server-v2" "ghcr.io/${{ github.repository_owner }}/server-v2")
          platform="linux-amd64"
          for repo in "${docker_repositories[@]}"; do
            platform_tags=" --amend ${repo}:${IMAGE_TAG_SUFFIX}-${platform}"
            for manifest in "${repo}:${IMAGE_TAG_SUFFIX}" "${repo}:latest"; do
              docker manifest create ${manifest} ${platform_tags}
              docker manifest push ${manifest}
            done
          done

  cleanup:
    needs: [build-server-v2, create-manifest]
    if: always()
    runs-on: revolution-runner
    steps:
      - name: Cleanup resources
        run: |
          sudo docker system prune -af
